#include "insertion_sort.h"
#include "merge_sort.h"
#include "hybrid_sort.h"
#include <iostream>
#include <windows.h>
#include <string>
#include <iomanip>
#include <random>


int main() {

    int n,i,random;
    LARGE_INTEGER counterStart, counterEnd, frequency;
    QueryPerformanceFrequency(&frequency);
    double time;


    // take input from user for number of elements
    std::cout << "please enter the number of elements : ";
    std::cin >> n;
    // declare array size of n
    int array_random[n];
    int array_ascending[n];
    int array_descending[n];


    for (i=0;i<n;i++){
        random = rand();
        array_random[i] = random;
    }

    //int array[]{14, 40, 31, 28, 3, 15, 17, 51};
    //int array[]{14, 40, 31, 28, 3, 15, 17, 51};
    int size{sizeof(array_random)/sizeof(int)};




    //HYBRID                                                                           //FOR ASCENDING

    int j = 1;
    for (i=0;i<n;i++){
        array_ascending[i] = j;
        j++;
    }

    std::cout << '\n';
    std::cout << "FOR ASCENDING ARRAY";

    //hybrid performance

    QueryPerformanceCounter(&counterStart);
    int hybrid_comparison = hybrid_sort(array_ascending, 0, size-1, 30);
    QueryPerformanceCounter(&counterEnd);

    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_ascending[i] << ' ';
    }
    */

    std::cout << '\n';
    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(hybrid_comparison);
    std::cout << '\n';



    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to microseconds
    time *= 1000000;



    std::ostringstream sf;
    sf.precision(3);
    sf << std::fixed << time;
    std::cout << "The time it took for hybrid_sort to sort ascending array is " + sf.str() + " microseconds";


    std::cout << '\n';



    //MERGE

    QueryPerformanceCounter(&counterStart);
    int merge_comparison = merge_sort(array_ascending, 0, size-1);
    QueryPerformanceCounter(&counterEnd);


    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_ascending[i] << ' ';
    }
    */

    std::cout << '\n';
    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(merge_comparison);

    std::cout << '\n';

    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to milliseconds
    time *= 1000000;

    std::ostringstream sg;
    sg.precision(3);
    sg << std::fixed << time;

    std::cout << "The time it took for merge_sort to sort ascending array is " + sg.str() + " microseconds";





    //HYBRID                                                                           //FOR DESCENDING
    j = n;
    for (i=0;i<n;i++){
        array_descending[i] = j;
        j--;
    }

    std::cout << '\n';
    std::cout << '\n';
    std::cout << '\n';
    std::cout << "FOR DESCENDING ARRAY\n";
    //hybrid performance

    QueryPerformanceCounter(&counterStart);
    hybrid_comparison = hybrid_sort(array_descending, 0, size-1, 35);
    QueryPerformanceCounter(&counterEnd);

    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_descending[i] << ' ';
    }
    */

    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(hybrid_comparison);
    std::cout << '\n';



    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to microseconds
    time *= 1000000;



    std::ostringstream sh;
    sh.precision(3);
    sh << std::fixed << time;
    std::cout << "The time it took for hybrid_sort to sort desending array is " + sh.str() + " microseconds";


    std::cout << '\n';



    //MERGE

    QueryPerformanceCounter(&counterStart);
    merge_comparison = merge_sort(array_descending, 0, size-1);
    QueryPerformanceCounter(&counterEnd);


    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_descending[i] << ' ';
    }
    */

    std::cout << '\n';
    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(merge_comparison);

    std::cout << '\n';

    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to milliseconds
    time *= 1000000;

    std::ostringstream sj;
    sj.precision(3);
    sj << std::fixed << time;

    std::cout << "The time it took for merge_sort to sort descending array is " + sj.str() + " microseconds";

    std::cout << '\n';


    //hybrid performance                                                                    //FOR RANDOM

    QueryPerformanceCounter(&counterStart);
    hybrid_comparison = hybrid_sort(array_random, 0, size-1, 165);
    QueryPerformanceCounter(&counterEnd);


    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_random[i] << ' ';
    }
    */

    std::cout << '\n';
    std::cout << '\n';
    std::cout << "FOR RANDOM ARRAY\n";
    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(hybrid_comparison);
    std::cout << '\n';



    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to microseconds
    time *= 1000000;



    std::ostringstream ss;
    ss.precision(3);
    ss << std::fixed << time;
    std::cout << "The time it took for hybrid_sort to sort random array is " + ss.str() + " microseconds";


    std::cout << '\n';


    //original merge_sort implementation

    QueryPerformanceCounter(&counterStart);
    merge_comparison = merge_sort(array_random, 0, size-1);
    QueryPerformanceCounter(&counterEnd);

    /*
    for (int i{0}; i < size; ++i) {
        std::cout << array_random[i] << ' ';
    }
    */

    std::cout << '\n';
    //print the key comparisons
    std::cout <<  "The number of key comparisons = " + std::to_string(merge_comparison);

    std::cout << '\n';

    time = (double)((double)(counterEnd.QuadPart - counterStart.QuadPart)/(double)frequency.QuadPart);

    //change from seconds to milliseconds
    time *= 1000000;

    std::ostringstream sd;
    sd.precision(3);
    sd << std::fixed << time;

    std::cout << "The time it took for merge_sort to sort random array is " + sd.str() + " microseconds";

    std::cout << '\n';
    return 0;
}

